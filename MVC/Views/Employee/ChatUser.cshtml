@{
    ViewData["Title"] = "Chat with User";
}

<div class="container-fluid h-100 py-3">
    <div class="row h-100">
        <div class="col-12 col-md-8 mx-auto">
            <!-- Chat Header -->
            <div class="card shadow">
                <div class="card-header bg-primary text-white py-3">
                    <div class="d-flex align-items-center">
                        <div class="rounded-circle bg-white text-primary d-flex align-items-center justify-content-center me-3" 
                             style="width: 40px; height: 40px">
                            <img id="receiverImage" src="" alt="receiver profile" class="rounded-circle"
                            onerror="this.src='/profile_images/placeholder.jpg'"
                            style="width:40px; height:40px;" />
                        </div>
                        <div>
                            <h5 class="mb-0" id="receiverName"></h5>
                            <small id="onlineStatus" class="text-white-50"></small>
                        </div>
                    </div>
                </div>

                <!-- Chat Messages -->
                <div id="chat-box" class="card-body bg-light" 
                     style="height: 65vh; overflow-y: auto; scrollbar-width: thin;">
                </div>

                <!-- Message Input -->
                <div class="card-footer bg-white">
                    <form id="chatForm" class="mb-0">
                        <div class="input-group">
                            <span class="input-group-text bg-white border-0">
                                <i class="fa-solid fa-face-smile"></i>
                            </span>
                            <input type="text" id="message" class="form-control border-0" 
                                   placeholder="Type a message..." autocomplete="off">
                            <span class="input-group-text bg-white border-0">
                                <i class="fa-solid fa-paperclip"></i>
                            </span>
                            <button type="submit" class="btn btn-primary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px">
                                <i class="fa-solid fa-paper-plane"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
<script>
    const receiverId = window.location.href.split("/").pop();
    console.log("receiverId in url:", receiverId);
    let receiver = null;
    let connection;
    const user = JSON.parse(sessionStorage.getItem("user"));
    const baseUrl = "http://localhost:5267/api";
    //
    //
    function getFormData() {
        const formData = new FormData();
        formData.append("Message", $("#message").val());
        formData.append("SenderId", user.userId);
        formData.append("ReceiverId", receiverId);

        return formData;
    }
    //
    function loadReceiverData() {
        return new Promise(function(resolve, reject) {
            $.ajax({
                url: `${baseUrl}/user/${receiverId}`,
                method: "GET",
                success: function (response, status, xhr) {
                    receiver = response.data;
                    $('#receiverName').text(receiver.firstName + " " + receiver.lastName);
                    $('#receiverImage').attr('src', `/profile_images/${receiver.image}`);
                    $('#onlineStatus').html(receiver?.isOnline == true ? `<i class="fa-solid fa-circle-check me-1"></i>Online` : `<i class="fa-solid fa-circle-xmark me-1"></i>Offline`);
                    //
                    resolve();
                },
                error: function (xhr, status, error) {
                    console.error("loadReceiverData():\n", xhr.responseJSON);
                    reject();
                }
            });
        });
    }
    //
    // Update the message append template in loadChatHistory and ReceiveMessage functions
    function appendMessage(chat, senderName) {
        let alignClass = (chat.senderId == user.userId) ? "justify-content-end" : "justify-content-start";
        let bubbleClass = (chat.senderId == user.userId) ? "bg-primary text-white" : "bg-white";
        let timestamp = new Date(chat.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        let messageStatus = chat.status || 'sent';
        let statusIcon = getStatusIcon(messageStatus);

        $("#chat-box").append(`
            <div class="d-flex ${alignClass} mb-3" data-message-id="${chat.chatId}">
                <div class="d-flex flex-column ${bubbleClass} shadow-sm rounded-3 p-3" style="max-width: 75%;">
                    <div class="message-text">${chat.message}</div>
                    <small class="text-${chat.senderId == user.userId ? 'white-50' : 'muted'} align-self-end mt-1">
                        ${timestamp}
                        ${statusIcon}
                    </small>
                </div>
            </div>
        `);
    }

    function getStatusIcon(status) {
        switch(status) {
            case 'sent':
                return '<i class="fa-solid fa-check"></i>';
            case 'delivered':
                return '<i class="fa-solid fa-check-double"></i>';
            case 'read':
                return '<i class="fa-solid fa-check-double text-primary"></i>';
            default:
                return '<i class="fa-solid fa-clock"></i>';
        }
    }
    //
    // Update loadChatHistory function to use the new appendMessage
    function loadChatHistory() {
        $.ajax({
            url: `${baseUrl}/chat/history/${user.userId}/${receiver.userId}`,
            method: "GET",
            success: function (response) {
                $("#message").val("");
                console.log("Chat History Loaded:", response);
                const chatArray = response.data;
                $("#chat-box").html("");

                chatArray.forEach(chat => {
                    appendMessage(chat, chat.senderId == user.userId ? 'You' : `${receiver.firstName} ${receiver.lastName}`);
                });

                $("#chat-box").scrollTop($("#chat-box")[0].scrollHeight);
            },
            error: function (xhr) {
                console.error("Error Loading Chat History:", xhr.responseJSON);
            }
        });
    }
    //
    function sendMessage() {
        let message = $("#message").val();

        if (!message.trim()) return;

        let formData = getFormData();

        // Send message via AJAX (store in DB)
        $.ajax({
            url: `${baseUrl}/chat`,
            method: "POST",
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                console.log("Message Sent:", response);
                const chatObject = {
                    chatId: null,
                    message: message,
                    senderId: user.userId,
                    receiverId: receiverId,
                    timestamp: new Date(),
                    isRead: false
                }
                // Append the new message instantly to UI
                appendMessage(chatObject, 'You');

                // Auto-scroll to the latest message
                $("#chat-box").scrollTop($("#chat-box")[0].scrollHeight);

                // Send message to receiver via SignalR
                if (connection) {
                    connection
                        .invoke("SendMessageToUser", receiver?.userId, chatObject)
                        .catch(err => {
                            console.error("SignalR Error:", err);
                        });
                }
            },
            error: function (xhr) {
                console.error("Error Sending Message:", xhr.responseJSON);
            }
        });

        // Clear input field after sending
        $("#message").val("");
    }

    // Create a SignalR connection with retry logic
    // Update the SignalR connection setup
    function startSignalRConnection() {
        connection = new signalR.HubConnectionBuilder()
            .withUrl(`http://localhost:5267/chatHub?userId=${user.userId}`, {
                withCredentials: false,
                skipNegotiation: false
            })
            .withAutomaticReconnect([0, 2000, 5000, 10000, 20000])
            .configureLogging(signalR.LogLevel.Information)
            .build();
        
        connection.start()
            .then(() => {
                console.log("Connected to SignalR!");
                // Enable the chat form after connection
                $("#chatForm").removeClass("disabled");
            })
            .catch(err => {
                console.error("SignalR Connection Error:", err);
                setTimeout(startSignalRConnection, 5000);
            });
    
        // Update the message receiving handler
        connection.on("ReceiveMessage", function (chat) {
            console.log("Received message:", chat);
            appendMessage(chat, chat.senderId === user.userId ? 'You' : receiver.firstName);
            $("#chat-box").scrollTop($("#chat-box")[0].scrollHeight);
            
            // Acknowledge message receipt
            if (chat.senderId !== user.userId) {
                connection.invoke("AcknowledgeMessage", chat.chatId, chat.senderId)
                    .catch(err => console.error("Error acknowledging message:", err));
            }
        });
    
        // Add online/offline status handlers
        connection.on("UserOnline", function(userId) {
            if(userId === receiver.userId) {
                $('#onlineStatus').html(`<i class="fa-solid fa-circle-check me-1"></i>Online`);
            }
        });
    
        connection.on("UserOffline", function(userId) {
            if(userId === receiver.userId) {
                $('#onlineStatus').html(`<i class="fa-solid fa-circle-xmark me-1"></i>Offline`);
            }
        });

    connection.on("MessageStatus", function (messageId, status) {
        const messageElement = $(`[data-message-id="${messageId}"]`);
        if (messageElement.length) {
            messageElement.find('i').replaceWith(getStatusIcon(status));
        }
    });
    }
    
    // DOCUMENT READY FUNCTION

    $(document).ready(function () {
        setTimeout(function() {
            loadReceiverData()
            .then(() => {
                loadChatHistory();
                startSignalRConnection();
            });
        }, 2000);

        //startSignalRConnection(); // Call the new connection setup function

        $("#chatForm").on("submit", function (e) {
            e.preventDefault();
            sendMessage();
        });
    });
</script>
}