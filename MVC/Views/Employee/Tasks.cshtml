@{
    ViewData["Title"] = "Tasks";
}
@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
}

<div id="alert"></div>

<div class="container mt-4">
    <!-- Add this modal form after your table -->
    <div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="taskModalLabel">Add New Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                
                <div class="modal-body">                    
                    <form id="taskForm" class="needs-validation" novalidate>
                        <div class="mb-3">
                            <label for="userName" class="form-label">Assigned To</label>
                            <input type="hidden" id="userId" class="form-control" />
                            <input type="text" id="userName" class="form-control" readonly />
                        </div>
                        <div class="mb-3">
                            <label for="title" class="form-label">Title</label>
                            <input type="text" class="form-control" id="title" name="title" required />
                            <div class="invalid-feedback">
                                Please enter a title
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="estimatedDays" class="form-label">Estimated Days</label>
                            <input type="number" class="form-control" id="estimatedDays" name="estimatedDays" min="1" />
                            <div class="invalid-feedback">
                                Please enter a valid number of days
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="startDate" class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="startDate" name="startDate" required />
                            <div class="invalid-feedback">
                                Please select a start date
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="endDate" class="form-label">End Date</label>
                            <input type="date" class="form-control" id="endDate" name="endDate" />
                        </div>
                        <div class="mb-3">
                            <label for="status" class="form-label">Status</label>
                            <select class="form-select" id="status" name="status" required>
                                <option value="">Select Status</option>
                                <option value="Pending">Pending</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                            <div class="invalid-feedback">
                                Please select a status
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="btnSaveTask">Save Task</button>
                </div>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <button id="btnAdd" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>Add Task
        </button>
    </div>

    <!-- Replace the existing table with this tree view structure -->
    <div class="card">
        <div class="card-header bg-light">
            <h5 class="mb-0">Tasks by Employee</h5>
        </div>
        <div class="card-body p-0">
            <div id="taskTreeView" class="accordion">
                <!-- Will be populated dynamically -->
            </div>
        </div>
    </div>
</div>

@section Scripts {

    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>
        const user = JSON.parse(sessionStorage.getItem("user"));
        const baseUrl = `http://localhost:5267/api/task`;
        const userUrl = "http://localhost:5267/api/user"; 

        // function to load employees
        function loadEmployeeData() {
            $('#userId').val(user.userId);
            $('#userName').val(`${user.firstName} ${user.lastName}`);
        }

        // function to load tasks
        function loadTaskData() {
            $.ajax({
                url: `${baseUrl}/user/${user.userId}`,
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    $('#taskTreeView').empty();

                    
                    if (response.data.length > 0) {
                        // Group tasks by user
                        const tasksByUser = {};
                        response.data.forEach(task => {
                            if (!tasksByUser[task.user.userId]) {
                                tasksByUser[task.user.userId] = {
                                    user: task.user,
                                    tasks: []
                                };
                            }
                            tasksByUser[task.user.userId].tasks.push(task);
                        });

                        console.log(tasksByUser);

                        // Render grouped tasks
                        Object.values(tasksByUser).forEach((group, index) => {
                            const user = group.user;
                            const tasks = group.tasks;
                            const accordionId = `accordion-${user.userId}`;
                            
                            $('#taskTreeView').append(`
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button ${index === 0 ? '' : 'collapsed'}" 
                                                type="button" 
                                                data-bs-toggle="collapse" 
                                                data-bs-target="#${accordionId}">
                                            <div class="d-flex align-items-center">
                                                <i class="fas fa-user me-2"></i>
                                                <span>${user.firstName} ${user.lastName}</span>
                                                <span class="badge bg-primary rounded-pill ms-2">${tasks.length}</span>
                                            </div>
                                        </button>
                                    </h2>
                                    <div id="${accordionId}" 
                                         class="accordion-collapse collapse ${index === 0 ? 'show' : ''}"
                                         data-bs-parent="#taskTreeView">
                                        <div class="accordion-body p-0">
                                            <div class="list-group list-group-flush">
                                                ${tasks.map(task => `
                                                    <div class="list-group-item">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <h6 class="mb-1">${task.title}</h6>
                                                                <p class="text-muted small mb-1">${task.description || 'No description'}</p>
                                                                <div class="small">
                                                                    <span class="me-3">
                                                                        <i class="fas fa-calendar me-1"></i>
                                                                        ${new Date(task.startDate).toDateString()}
                                                                        ${task.endDate ? ' - ' + new Date(task.endDate).toDateString() : ''}
                                                                    </span>
                                                                    <span class="me-3">
                                                                        <i class="fas fa-clock me-1"></i>
                                                                        ${task.estimatedDays || 0} days
                                                                    </span>
                                                                    <span class="badge ${getStatusClass(task.status)}">${task.status}</span>
                                                                </div>
                                                            </div>
                                                            <div class="btn-group btn-group-sm">
                                                                <button class="btn btn-outline-primary btn-edit" data-id="${task.taskId}">
                                                                    <i class="fas fa-edit"></i>
                                                                </button>
                                                                <button class="btn btn-outline-danger btn-delete" data-id="${task.taskId}">
                                                                    <i class="fas fa-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                `).join('')}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `);
                        });
                    } else {
                        $('#taskTreeView').html(`
                            <div class="text-center p-4 text-muted">
                                <i class="fas fa-tasks fa-2x mb-3"></i>
                                <p class="mb-0">No tasks assigned</p>
                            </div>
                        `);
                    }
                },
                error: function (error) {
                    $('#alert').removeClass().addClass('alert alert-danger')
                        .text('Error loading task data: ' + error.statusText).show();
                    setTimeout(function() {
                        $('#alert').hide();
                    }, 2000);
                }
            });
        }

        function getStatusClass(status) {
            switch (status.toLowerCase()) {
                case 'pending':
                    return 'bg-warning';
                case 'in progress':
                    return 'bg-primary';
                case 'completed':
                    return 'bg-success';
                case 'cancelled':
                    return 'bg-danger';
                default:
                    return 'bg-secondary';
            }
        }

        // Function to save/update task
        function saveTask() {
            const taskId = $('#btnSaveTask').data('id');
            const method = taskId ? 'PUT' : 'POST';
            const url = baseUrl;
            
            // Create a task object that matches your API's expected format
            const taskData = {
                taskId: taskId || null,
                userId: $('#userId').val(),
                title: $('#title').val().trim(),
                description: $('#description').val().trim() || null,
                estimatedDays: parseInt($('#estimatedDays').val()) || null,
                startDate: $('#startDate').val(),
                endDate: $('#endDate').val() || null,
                status: $('#status').val()
            };

            // Validate required fields
            if (!taskData.userId) {
                $('#userId').addClass('is-invalid');
                $('#alert').removeClass().addClass('alert alert-danger')
                    .text('Please select an employee').show();
                return;
            } else {
                $('#userId').removeClass('is-invalid');
            }

            // Validate dates
            if (taskData.endDate && taskData.startDate > taskData.endDate) {
                $('#endDate').addClass('is-invalid');
                $('#alert').removeClass().addClass('alert alert-danger')
                    .text('End date cannot be earlier than start date').show();
                setTimeout(function() {
                    $('#alert').hide();
                }, 2000);
                return;
            } else {
                $('#endDate').removeClass('is-invalid');
            }

            $.ajax({
                url: url,
                type: method,
                contentType: 'application/json',
                data: JSON.stringify(taskData),
                success: function(response) {
                    $('#taskModal').modal('hide');
                    $('#alert').removeClass().addClass('alert alert-success')
                        .text(taskId ? 'Task updated successfully!' : 'Task added successfully!').show();
                    setTimeout(function() {
                        $('#alert').hide();
                    }, 2000);
                    loadTaskData();
                    $('#taskForm').removeClass('was-validated');
                },
                error: function(error) {
                    console.error('Error saving task:', error);
                    let errorMessage = taskId ? 'Error updating task' : 'Error adding task';
                    if (error.responseJSON && error.responseJSON.errors) {
                        errorMessage += ': ' + Object.values(error.responseJSON.errors).flat().join(', ');
                    }
                    $('#alert').removeClass().addClass('alert alert-danger')
                        .text(errorMessage).show();
                    setTimeout(function() {
                        $('#alert').hide();
                    }, 2000);
                }
            });
        }

        function setDates() {
            var today = new Date(); // Get today's date
            var formattedDate = today.toISOString().slice(0, 10);
            $('#startDate').val(formattedDate);
            $('#endDate').val(formattedDate);
        }

        // Calculate and Set Estimated Days
        function calculateEstimatedDays() {
            let taskStartDate = $('#startDate').val();
            let taskEndDate = $('#endDate').val();

            if (taskStartDate && taskEndDate) {
                let startDate = new Date(taskStartDate);
                let endDate = new Date(taskEndDate);

                if (startDate > endDate) {
                    $('#alert').removeClass().addClass('alert alert-danger')
                        .text("End date cannot be before the start date!").show();
                    setTimeout(function() {
                        $('#alert').hide();
                    }, 2000);
                    $('#endDate').val('');
                    $("#estimatedDays").val('');
                    return;
                }

                // Calculate difference in days
                let timeDifference = endDate.getTime() - startDate.getTime();
                let daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24)); // Convert to days

                $("#estimatedDays").val(daysDifference);
            } else {
                $("#estimatedDays").val('');
            }
        }


        // ========

        $(document).ready(function () {
            loadTaskData();

            $('#btnAdd').on('click', function() {
                $('#taskForm')[0].reset();
                setDates();
                $('#taskModal').modal('show');
                $('#taskModalLabel').text('Add New Task');
                $('#btnSaveTask').text('Save Task').data('id', '');
            });

            $('#taskModal').on('shown.bs.modal', function() {
                loadEmployeeData();
            });

            // Add form validation
            $('#taskForm').on('submit', function(e) {
                e.preventDefault();
                
                // Clear previous validation states
                $(this).find('.is-invalid').removeClass('is-invalid');
                
                // Validate title explicitly
                const title = $('#title').val().trim();
                if (!title) {
                    $('#title').addClass('is-invalid');
                    $('#alert').removeClass().addClass('alert alert-danger')
                        .text('Please enter a title').show();
                    setTimeout(function() {
                        $('#alert').hide();
                    }, 2000);
                    return;
                }

                if (this.checkValidity()) {
                    saveTask();
                }
                $(this).addClass('was-validated');
            });

            // Update save button to trigger form submission
            $('#btnSaveTask').on('click', function() {
                $('#taskForm').submit();
            });

            // Edit Task
            $(document).on('click', '.btn-edit', function() {
                const taskId = $(this).data('id');
                $.ajax({
                    url: `${baseUrl}/${taskId}`,
                    type: 'GET',
                    success: function(response) {
                        if (response.success && response.data) {
                            const task = response.data;
                            // Set a slight delay to ensure dropdown is populated
                            setTimeout(() => {
                                $('#userId').val(task.userId);
                                $('#title').val(task.title);
                                $('#description').val(task.description);
                                $('#estimatedDays').val(task.estimatedDays);
                                $('#startDate').val(task.startDate.split('T')[0]);
                                $('#endDate').val(task.endDate ? task.endDate.split('T')[0] : '');
                                $('#status').val(task.status);
                                
                                $('#taskModalLabel').text('Edit Task');
                                $('#btnSaveTask').text('Update Task').data('id', taskId);
                                $('#taskModal').modal('show');
                            }, 300);
                        }
                    },
                    error: function(error) {
                        console.error('Error loading task:', error);
                        $('#alert').removeClass().addClass('alert alert-danger')
                            .text('Error loading task data').show();
                        setTimeout(function() {
                            $('#alert').hide();
                        }, 2000);
                    }
                });
            });

            // Delete Task
            $(document).on('click', '.btn-delete', function() {
                const taskId = $(this).data('id');
                if (confirm('Are you sure you want to delete this task?')) {
                    $.ajax({
                        url: `${baseUrl}/${taskId}`,
                        type: 'DELETE',
                        success: function(response) {
                            $('#alert').removeClass().addClass('alert alert-success')
                                .text('Task deleted successfully!').show();
                            setTimeout(function() {
                                $('#alert').hide();
                            }, 2000);
                            loadTaskData();
                        },
                        error: function(error) {
                            console.error('Error deleting task:', error);
                            $('#alert').removeClass().addClass('alert alert-danger')
                                .text('Error deleting task').show();
                            setTimeout(function() {
                                $('#alert').hide();
                            }, 2000);
                        }
                    });
                }
            });

            // Event Listeners for Start and End Date Changes
            $('#startDate, #endDate').on('change', function () {
                calculateEstimatedDays();
            });

        });
   </script>
}